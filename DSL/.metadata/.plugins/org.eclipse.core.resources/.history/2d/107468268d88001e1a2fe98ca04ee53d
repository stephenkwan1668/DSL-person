/*
 * generated by Xtext 2.32.0
 */
package persons.tasks.scoping

import java.util.Collection
import java.util.LinkedList
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import persons.tasks.taskDSL.ProjectUse
import persons.tasks.taskDSL.Task
import persons.tasks.taskDSL.TaskDSLPackage.Literals

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class TaskDSLScopeProvider extends AbstractTaskDSLScopeProvider {
	override getScope(EObject context, EReference reference) {
if (context instanceof ProjectUse &&
reference == Literals.PROJECT_USE__PROJECT
) {
return getScopeProjectUseProject(context as ProjectUse);
}
return super.getScope(context, reference);
}
private def getScopeProjectUseProject(ProjectUse projectUse) {
var EObject context = projectUse;
while (!(context === null || context instanceof Task)) {
context = context.eContainer();
}
var runningTask = context as Task;
var IScope scope = IScope.NULLSCOPE;
var Collection<Task> visited = new LinkedList<Task>();
while (runningTask !== null && !visited.contains(runningTask)) {
visited.add(runningTask);
scope = Scopes.scopeFor(runningTask.getProjects(), scope);
runningTask = runningTask.getExtends();
}
return scope;
}
}
