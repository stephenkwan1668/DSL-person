/**
 * generated by Xtext 2.32.0
 */
package persons.tasks.taskDSL.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import persons.tasks.taskDSL.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class TaskDSLFactoryImpl extends EFactoryImpl implements TaskDSLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static TaskDSLFactory init()
  {
    try
    {
      TaskDSLFactory theTaskDSLFactory = (TaskDSLFactory)EPackage.Registry.INSTANCE.getEFactory(TaskDSLPackage.eNS_URI);
      if (theTaskDSLFactory != null)
      {
        return theTaskDSLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new TaskDSLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TaskDSLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case TaskDSLPackage.PLANNING: return createPlanning();
      case TaskDSLPackage.PERSON: return createPerson();
      case TaskDSLPackage.TASK: return createTask();
      case TaskDSLPackage.PROJECT: return createProject();
      case TaskDSLPackage.PROJECT_USE: return createProjectUse();
      case TaskDSLPackage.DURATION: return createDuration();
      case TaskDSLPackage.ACTION: return createAction();
      case TaskDSLPackage.LUNCH_ACTION: return createLunchAction();
      case TaskDSLPackage.MEETING_ACTION: return createMeetingAction();
      case TaskDSLPackage.PAPER_ACTION: return createPaperAction();
      case TaskDSLPackage.PAYMENT_ACTION: return createPaymentAction();
      case TaskDSLPackage.INT_EXPRESSION: return createIntExpression();
      case TaskDSLPackage.EXPRESSION_MINUS: return createExpressionMinus();
      case TaskDSLPackage.EXPRESSION_PLUS: return createExpressionPlus();
      case TaskDSLPackage.EXPRESSION_BRACKET: return createExpressionBracket();
      case TaskDSLPackage.EXPRESSION_CONSTANT_INT: return createExpressionConstantInt();
      case TaskDSLPackage.EXPRESSION_BALANCE: return createExpressionBalance();
      case TaskDSLPackage.BOOLEAN_EXPRESSION: return createBooleanExpression();
      case TaskDSLPackage.NOT_EXPRESSION: return createNotExpression();
      case TaskDSLPackage.BOOLEAN_EXPRESSION_BRACKET: return createBooleanExpressionBracket();
      case TaskDSLPackage.BOOLEAN_EXPRESSION_CONSTANT: return createBooleanExpressionConstant();
      case TaskDSLPackage.EXPRESSION_ADDITION: return createExpressionAddition();
      case TaskDSLPackage.EXPRESSION_SUBTRACTION: return createExpressionSubtraction();
      case TaskDSLPackage.EXPRESSION_MULTIPLY: return createExpressionMultiply();
      case TaskDSLPackage.EXPRESSION_DIVISION: return createExpressionDivision();
      case TaskDSLPackage.EXPRESSION_MAXIMUM: return createExpressionMaximum();
      case TaskDSLPackage.EXPRESSION_MINIMUM: return createExpressionMinimum();
      case TaskDSLPackage.EXPRESSION_MODULO: return createExpressionModulo();
      case TaskDSLPackage.EXPRESSION_POWER: return createExpressionPower();
      case TaskDSLPackage.EXPRESSION_BIN_OP: return createExpressionBinOp();
      case TaskDSLPackage.EXPRESSION_COMP_OP: return createExpressionCompOp();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case TaskDSLPackage.TIME_UNIT:
        return createTimeUnitFromString(eDataType, initialValue);
      case TaskDSLPackage.BALANCE:
        return createBalanceFromString(eDataType, initialValue);
      case TaskDSLPackage.BINARY_BOOLEAN_OPERATOR:
        return createBinaryBooleanOperatorFromString(eDataType, initialValue);
      case TaskDSLPackage.COMPARE_OPERATOR:
        return createCompareOperatorFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case TaskDSLPackage.TIME_UNIT:
        return convertTimeUnitToString(eDataType, instanceValue);
      case TaskDSLPackage.BALANCE:
        return convertBalanceToString(eDataType, instanceValue);
      case TaskDSLPackage.BINARY_BOOLEAN_OPERATOR:
        return convertBinaryBooleanOperatorToString(eDataType, instanceValue);
      case TaskDSLPackage.COMPARE_OPERATOR:
        return convertCompareOperatorToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Planning createPlanning()
  {
    PlanningImpl planning = new PlanningImpl();
    return planning;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Person createPerson()
  {
    PersonImpl person = new PersonImpl();
    return person;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Task createTask()
  {
    TaskImpl task = new TaskImpl();
    return task;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Project createProject()
  {
    ProjectImpl project = new ProjectImpl();
    return project;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProjectUse createProjectUse()
  {
    ProjectUseImpl projectUse = new ProjectUseImpl();
    return projectUse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Duration createDuration()
  {
    DurationImpl duration = new DurationImpl();
    return duration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Action createAction()
  {
    ActionImpl action = new ActionImpl();
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LunchAction createLunchAction()
  {
    LunchActionImpl lunchAction = new LunchActionImpl();
    return lunchAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MeetingAction createMeetingAction()
  {
    MeetingActionImpl meetingAction = new MeetingActionImpl();
    return meetingAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PaperAction createPaperAction()
  {
    PaperActionImpl paperAction = new PaperActionImpl();
    return paperAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PaymentAction createPaymentAction()
  {
    PaymentActionImpl paymentAction = new PaymentActionImpl();
    return paymentAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntExpression createIntExpression()
  {
    IntExpressionImpl intExpression = new IntExpressionImpl();
    return intExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionMinus createExpressionMinus()
  {
    ExpressionMinusImpl expressionMinus = new ExpressionMinusImpl();
    return expressionMinus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionPlus createExpressionPlus()
  {
    ExpressionPlusImpl expressionPlus = new ExpressionPlusImpl();
    return expressionPlus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionBracket createExpressionBracket()
  {
    ExpressionBracketImpl expressionBracket = new ExpressionBracketImpl();
    return expressionBracket;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionConstantInt createExpressionConstantInt()
  {
    ExpressionConstantIntImpl expressionConstantInt = new ExpressionConstantIntImpl();
    return expressionConstantInt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionBalance createExpressionBalance()
  {
    ExpressionBalanceImpl expressionBalance = new ExpressionBalanceImpl();
    return expressionBalance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanExpression createBooleanExpression()
  {
    BooleanExpressionImpl booleanExpression = new BooleanExpressionImpl();
    return booleanExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotExpression createNotExpression()
  {
    NotExpressionImpl notExpression = new NotExpressionImpl();
    return notExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanExpressionBracket createBooleanExpressionBracket()
  {
    BooleanExpressionBracketImpl booleanExpressionBracket = new BooleanExpressionBracketImpl();
    return booleanExpressionBracket;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanExpressionConstant createBooleanExpressionConstant()
  {
    BooleanExpressionConstantImpl booleanExpressionConstant = new BooleanExpressionConstantImpl();
    return booleanExpressionConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionAddition createExpressionAddition()
  {
    ExpressionAdditionImpl expressionAddition = new ExpressionAdditionImpl();
    return expressionAddition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionSubtraction createExpressionSubtraction()
  {
    ExpressionSubtractionImpl expressionSubtraction = new ExpressionSubtractionImpl();
    return expressionSubtraction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionMultiply createExpressionMultiply()
  {
    ExpressionMultiplyImpl expressionMultiply = new ExpressionMultiplyImpl();
    return expressionMultiply;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionDivision createExpressionDivision()
  {
    ExpressionDivisionImpl expressionDivision = new ExpressionDivisionImpl();
    return expressionDivision;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionMaximum createExpressionMaximum()
  {
    ExpressionMaximumImpl expressionMaximum = new ExpressionMaximumImpl();
    return expressionMaximum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionMinimum createExpressionMinimum()
  {
    ExpressionMinimumImpl expressionMinimum = new ExpressionMinimumImpl();
    return expressionMinimum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionModulo createExpressionModulo()
  {
    ExpressionModuloImpl expressionModulo = new ExpressionModuloImpl();
    return expressionModulo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionPower createExpressionPower()
  {
    ExpressionPowerImpl expressionPower = new ExpressionPowerImpl();
    return expressionPower;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionBinOp createExpressionBinOp()
  {
    ExpressionBinOpImpl expressionBinOp = new ExpressionBinOpImpl();
    return expressionBinOp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionCompOp createExpressionCompOp()
  {
    ExpressionCompOpImpl expressionCompOp = new ExpressionCompOpImpl();
    return expressionCompOp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TimeUnit createTimeUnitFromString(EDataType eDataType, String initialValue)
  {
    TimeUnit result = TimeUnit.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTimeUnitToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Balance createBalanceFromString(EDataType eDataType, String initialValue)
  {
    Balance result = Balance.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBalanceToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BinaryBooleanOperator createBinaryBooleanOperatorFromString(EDataType eDataType, String initialValue)
  {
    BinaryBooleanOperator result = BinaryBooleanOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBinaryBooleanOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CompareOperator createCompareOperatorFromString(EDataType eDataType, String initialValue)
  {
    CompareOperator result = CompareOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertCompareOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TaskDSLPackage getTaskDSLPackage()
  {
    return (TaskDSLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static TaskDSLPackage getPackage()
  {
    return TaskDSLPackage.eINSTANCE;
  }

} //TaskDSLFactoryImpl
