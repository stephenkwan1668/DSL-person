/*
 * generated by Xtext 2.32.0
 */
package persons.tasks.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TaskDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class PlanningElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.Planning");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlanningKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAnonymousAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cAnonymousAnonymousKeyword_2_0 = (Keyword)cAnonymousAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cPersonsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cPersonsPersonParserRuleCall_3_0_0 = (RuleCall)cPersonsAssignment_3_0.eContents().get(0);
		private final Assignment cTasksAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cTasksTaskParserRuleCall_3_1_0 = (RuleCall)cTasksAssignment_3_1.eContents().get(0);
		
		//Planning: 'Planning' name = ID
		//(anonymous ?= 'anonymous')?
		//(persons += Person | tasks += Task)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		// 'Planning' name = ID
		//(anonymous ?= 'anonymous')?
		//(persons += Person | tasks += Task)*
		public Group getGroup() { return cGroup; }
		
		//'Planning'
		public Keyword getPlanningKeyword_0() { return cPlanningKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(anonymous ?= 'anonymous')?
		public Assignment getAnonymousAssignment_2() { return cAnonymousAssignment_2; }
		
		//'anonymous'
		public Keyword getAnonymousAnonymousKeyword_2_0() { return cAnonymousAnonymousKeyword_2_0; }
		
		//(persons += Person | tasks += Task)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//persons += Person
		public Assignment getPersonsAssignment_3_0() { return cPersonsAssignment_3_0; }
		
		//Person
		public RuleCall getPersonsPersonParserRuleCall_3_0_0() { return cPersonsPersonParserRuleCall_3_0_0; }
		
		//tasks += Task
		public Assignment getTasksAssignment_3_1() { return cTasksAssignment_3_1; }
		
		//Task
		public RuleCall getTasksTaskParserRuleCall_3_1_0() { return cTasksTaskParserRuleCall_3_1_0; }
	}
	public class PersonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.Person");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPersonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Person: 'Person:' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Person:' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Person:'
		public Keyword getPersonKeyword_0() { return cPersonKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cActionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionActionParserRuleCall_2_0 = (RuleCall)cActionAssignment_2.eContents().get(0);
		private final Keyword cPersonsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPersonsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cPersonsPersonCrossReference_4_0 = (CrossReference)cPersonsAssignment_4.eContents().get(0);
		private final RuleCall cPersonsPersonIDTerminalRuleCall_4_0_1 = (RuleCall)cPersonsPersonCrossReference_4_0.eContents().get(1);
		private final Keyword cPriorityKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPrioAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPrioINTTerminalRuleCall_6_0 = (RuleCall)cPrioAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cDurationKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cDurationAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cDurationDurationParserRuleCall_7_1_0 = (RuleCall)cDurationAssignment_7_1.eContents().get(0);
		private final Keyword cDefineProjectsKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cProjectsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cProjectsProjectParserRuleCall_9_0 = (RuleCall)cProjectsAssignment_9.eContents().get(0);
		private final Keyword cUseProjectsKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cUseAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cUseProjectUseParserRuleCall_11_0 = (RuleCall)cUseAssignment_11.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cExtendsKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cExtendsAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final CrossReference cExtendsTaskCrossReference_12_1_0 = (CrossReference)cExtendsAssignment_12_1.eContents().get(0);
		private final RuleCall cExtendsTaskIDTerminalRuleCall_12_1_0_1 = (RuleCall)cExtendsTaskCrossReference_12_1_0.eContents().get(1);
		
		//Task: 'Task:' name = ID action = Action // added name
		//'persons:' persons += [Person] +
		//'priority:' prio = INT
		//('duration:' duration = Duration)?
		//'defineProjects:' (projects += Project)*
		//'useProjects:' (use += ProjectUse)*
		//("extends" extends=[Task|ID])?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		// 'Task:' name = ID action = Action // added name
		//'persons:' persons += [Person] +
		//'priority:' prio = INT
		//('duration:' duration = Duration)?
		//'defineProjects:' (projects += Project)*
		//'useProjects:' (use += ProjectUse)*
		//("extends" extends=[Task|ID])?
		public Group getGroup() { return cGroup; }
		
		//'Task:'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//action = Action
		public Assignment getActionAssignment_2() { return cActionAssignment_2; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_2_0() { return cActionActionParserRuleCall_2_0; }
		
		// // added name
		//'persons:'
		public Keyword getPersonsKeyword_3() { return cPersonsKeyword_3; }
		
		//persons += [Person] +
		public Assignment getPersonsAssignment_4() { return cPersonsAssignment_4; }
		
		//[Person]
		public CrossReference getPersonsPersonCrossReference_4_0() { return cPersonsPersonCrossReference_4_0; }
		
		//ID
		public RuleCall getPersonsPersonIDTerminalRuleCall_4_0_1() { return cPersonsPersonIDTerminalRuleCall_4_0_1; }
		
		//'priority:'
		public Keyword getPriorityKeyword_5() { return cPriorityKeyword_5; }
		
		//prio = INT
		public Assignment getPrioAssignment_6() { return cPrioAssignment_6; }
		
		//INT
		public RuleCall getPrioINTTerminalRuleCall_6_0() { return cPrioINTTerminalRuleCall_6_0; }
		
		//('duration:' duration = Duration)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'duration:'
		public Keyword getDurationKeyword_7_0() { return cDurationKeyword_7_0; }
		
		//duration = Duration
		public Assignment getDurationAssignment_7_1() { return cDurationAssignment_7_1; }
		
		//Duration
		public RuleCall getDurationDurationParserRuleCall_7_1_0() { return cDurationDurationParserRuleCall_7_1_0; }
		
		//'defineProjects:'
		public Keyword getDefineProjectsKeyword_8() { return cDefineProjectsKeyword_8; }
		
		//(projects += Project)*
		public Assignment getProjectsAssignment_9() { return cProjectsAssignment_9; }
		
		//Project
		public RuleCall getProjectsProjectParserRuleCall_9_0() { return cProjectsProjectParserRuleCall_9_0; }
		
		//'useProjects:'
		public Keyword getUseProjectsKeyword_10() { return cUseProjectsKeyword_10; }
		
		//(use += ProjectUse)*
		public Assignment getUseAssignment_11() { return cUseAssignment_11; }
		
		//ProjectUse
		public RuleCall getUseProjectUseParserRuleCall_11_0() { return cUseProjectUseParserRuleCall_11_0; }
		
		//("extends" extends=[Task|ID])?
		public Group getGroup_12() { return cGroup_12; }
		
		//"extends"
		public Keyword getExtendsKeyword_12_0() { return cExtendsKeyword_12_0; }
		
		//extends=[Task|ID]
		public Assignment getExtendsAssignment_12_1() { return cExtendsAssignment_12_1; }
		
		//[Task|ID]
		public CrossReference getExtendsTaskCrossReference_12_1_0() { return cExtendsTaskCrossReference_12_1_0; }
		
		//ID
		public RuleCall getExtendsTaskIDTerminalRuleCall_12_1_0_1() { return cExtendsTaskIDTerminalRuleCall_12_1_0_1; }
	}
	public class ProjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.Project");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Project: name = ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ProjectUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.ProjectUse");
		private final Assignment cProjectAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cProjectProjectCrossReference_0 = (CrossReference)cProjectAssignment.eContents().get(0);
		private final RuleCall cProjectProjectIDTerminalRuleCall_0_1 = (RuleCall)cProjectProjectCrossReference_0.eContents().get(1);
		
		//ProjectUse: project = [Project]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//project = [Project]
		public Assignment getProjectAssignment() { return cProjectAssignment; }
		
		//[Project]
		public CrossReference getProjectProjectCrossReference_0() { return cProjectProjectCrossReference_0; }
		
		//ID
		public RuleCall getProjectProjectIDTerminalRuleCall_0_1() { return cProjectProjectIDTerminalRuleCall_0_1; }
	}
	public class DurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.Duration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDlAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDlINTTerminalRuleCall_0_0 = (RuleCall)cDlAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitTimeUnitEnumRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		
		//Duration:
		//dl = INT unit = TimeUnit
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//dl = INT unit = TimeUnit
		public Group getGroup() { return cGroup; }
		
		//dl = INT
		public Assignment getDlAssignment_0() { return cDlAssignment_0; }
		
		//INT
		public RuleCall getDlINTTerminalRuleCall_0_0() { return cDlINTTerminalRuleCall_0_0; }
		
		//unit = TimeUnit
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }
		
		//TimeUnit
		public RuleCall getUnitTimeUnitEnumRuleCall_1_0() { return cUnitTimeUnitEnumRuleCall_1_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLunchActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMeetingActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPaperActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPaymentActionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Action: LunchAction | MeetingAction | PaperAction | PaymentAction
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LunchAction | MeetingAction | PaperAction | PaymentAction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LunchAction
		public RuleCall getLunchActionParserRuleCall_0() { return cLunchActionParserRuleCall_0; }
		
		//MeetingAction
		public RuleCall getMeetingActionParserRuleCall_1() { return cMeetingActionParserRuleCall_1; }
		
		//PaperAction
		public RuleCall getPaperActionParserRuleCall_2() { return cPaperActionParserRuleCall_2; }
		
		//PaymentAction
		public RuleCall getPaymentActionParserRuleCall_3() { return cPaymentActionParserRuleCall_3; }
	}
	public class LunchActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.LunchAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLunchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLocationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLocationIDTerminalRuleCall_1_0 = (RuleCall)cLocationAssignment_1.eContents().get(0);
		
		//LunchAction: 'Lunch' location = ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Lunch' location = ID
		public Group getGroup() { return cGroup; }
		
		//'Lunch'
		public Keyword getLunchKeyword_0() { return cLunchKeyword_0; }
		
		//location = ID
		public Assignment getLocationAssignment_1() { return cLocationAssignment_1; }
		
		//ID
		public RuleCall getLocationIDTerminalRuleCall_1_0() { return cLocationIDTerminalRuleCall_1_0; }
	}
	public class MeetingActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.MeetingAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMeetingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTopicAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTopicSTRINGTerminalRuleCall_1_0 = (RuleCall)cTopicAssignment_1.eContents().get(0);
		
		//MeetingAction: 'Meeting' topic = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Meeting' topic = STRING
		public Group getGroup() { return cGroup; }
		
		//'Meeting'
		public Keyword getMeetingKeyword_0() { return cMeetingKeyword_0; }
		
		//topic = STRING
		public Assignment getTopicAssignment_1() { return cTopicAssignment_1; }
		
		//STRING
		public RuleCall getTopicSTRINGTerminalRuleCall_1_0() { return cTopicSTRINGTerminalRuleCall_1_0; }
	}
	public class PaperActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.PaperAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReportAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReportIDTerminalRuleCall_1_0 = (RuleCall)cReportAssignment_1.eContents().get(0);
		
		//PaperAction: 'Report' report = ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Report' report = ID
		public Group getGroup() { return cGroup; }
		
		//'Report'
		public Keyword getReportKeyword_0() { return cReportKeyword_0; }
		
		//report = ID
		public Assignment getReportAssignment_1() { return cReportAssignment_1; }
		
		//ID
		public RuleCall getReportIDTerminalRuleCall_1_0() { return cReportIDTerminalRuleCall_1_0; }
	}
	public class PaymentActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.PaymentAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cConditionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cConditionBooleanExpressionParserRuleCall_0_1_0 = (RuleCall)cConditionAssignment_0_1.eContents().get(0);
		private final Keyword cPayKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAmountAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAmountIntExpressionParserRuleCall_2_0 = (RuleCall)cAmountAssignment_2.eContents().get(0);
		private final Keyword cEuroKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PaymentAction: ('If' condition = BooleanExpression)?
		//'Pay' amount = IntExpression 'euro'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		// ('If' condition = BooleanExpression)?
		//'Pay' amount = IntExpression 'euro'
		public Group getGroup() { return cGroup; }
		
		//('If' condition = BooleanExpression)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'If'
		public Keyword getIfKeyword_0_0() { return cIfKeyword_0_0; }
		
		//condition = BooleanExpression
		public Assignment getConditionAssignment_0_1() { return cConditionAssignment_0_1; }
		
		//BooleanExpression
		public RuleCall getConditionBooleanExpressionParserRuleCall_0_1_0() { return cConditionBooleanExpressionParserRuleCall_0_1_0; }
		
		//'Pay'
		public Keyword getPayKeyword_1() { return cPayKeyword_1; }
		
		//amount = IntExpression
		public Assignment getAmountAssignment_2() { return cAmountAssignment_2; }
		
		//IntExpression
		public RuleCall getAmountIntExpressionParserRuleCall_2_0() { return cAmountIntExpressionParserRuleCall_2_0; }
		
		//'euro'
		public Keyword getEuroKeyword_3() { return cEuroKeyword_3; }
	}
	public class IntExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.IntExpression");
		private final RuleCall cExpressionLevel1ParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//IntExpression: ExpressionLevel1
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionLevel1
		public RuleCall getExpressionLevel1ParserRuleCall() { return cExpressionLevel1ParserRuleCall; }
	}
	public class ExpressionLevel1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.ExpressionLevel1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionLevel2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cExpressionAdditionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpressionLevel2ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cExpressionSubtractionLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpressionLevel2ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//ExpressionLevel1 returns IntExpression: // Left associativity
		//ExpressionLevel2
		//( ({ExpressionAddition.left =current} "+" right=ExpressionLevel2)
		//| ({ExpressionSubtraction.left=current} "-" right=ExpressionLevel2)
		//)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		// // Left associativity
		//ExpressionLevel2
		//( ({ExpressionAddition.left =current} "+" right=ExpressionLevel2)
		//| ({ExpressionSubtraction.left=current} "-" right=ExpressionLevel2)
		//)*
		public Group getGroup() { return cGroup; }
		
		// // Left associativity
		//ExpressionLevel2
		public RuleCall getExpressionLevel2ParserRuleCall_0() { return cExpressionLevel2ParserRuleCall_0; }
		
		//( ({ExpressionAddition.left =current} "+" right=ExpressionLevel2)
		//| ({ExpressionSubtraction.left=current} "-" right=ExpressionLevel2)
		//)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({ExpressionAddition.left =current} "+" right=ExpressionLevel2)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ExpressionAddition.left =current}
		public Action getExpressionAdditionLeftAction_1_0_0() { return cExpressionAdditionLeftAction_1_0_0; }
		
		//"+"
		public Keyword getPlusSignKeyword_1_0_1() { return cPlusSignKeyword_1_0_1; }
		
		//right=ExpressionLevel2
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//ExpressionLevel2
		public RuleCall getRightExpressionLevel2ParserRuleCall_1_0_2_0() { return cRightExpressionLevel2ParserRuleCall_1_0_2_0; }
		
		//({ExpressionSubtraction.left=current} "-" right=ExpressionLevel2)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{ExpressionSubtraction.left=current}
		public Action getExpressionSubtractionLeftAction_1_1_0() { return cExpressionSubtractionLeftAction_1_1_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1_1_1() { return cHyphenMinusKeyword_1_1_1; }
		
		//right=ExpressionLevel2
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//ExpressionLevel2
		public RuleCall getRightExpressionLevel2ParserRuleCall_1_1_2_0() { return cRightExpressionLevel2ParserRuleCall_1_1_2_0; }
	}
	public class ExpressionLevel2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.ExpressionLevel2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionLevel3ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cExpressionMultiplyLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpressionLevel3ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cExpressionDivisionLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpressionLevel3ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cExpressionMaximumLeftAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cMaxKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cRightAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRightExpressionLevel3ParserRuleCall_1_2_2_0 = (RuleCall)cRightAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Action cExpressionMinimumLeftAction_1_3_0 = (Action)cGroup_1_3.eContents().get(0);
		private final Keyword cMinKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cRightAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cRightExpressionLevel3ParserRuleCall_1_3_2_0 = (RuleCall)cRightAssignment_1_3_2.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Action cExpressionModuloLeftAction_1_4_0 = (Action)cGroup_1_4.eContents().get(0);
		private final Keyword cModKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		private final Assignment cRightAssignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final RuleCall cRightExpressionLevel3ParserRuleCall_1_4_2_0 = (RuleCall)cRightAssignment_1_4_2.eContents().get(0);
		
		//ExpressionLevel2 returns IntExpression: // Left associativity
		//ExpressionLevel3
		//( ({ExpressionMultiply.left=current} "*" right=ExpressionLevel3)
		//| ({ExpressionDivision.left=current} "/" right=ExpressionLevel3)
		//| ({ExpressionMaximum.left =current} "max" right=ExpressionLevel3)
		//| ({ExpressionMinimum.left =current} "min" right=ExpressionLevel3)
		//| ({ExpressionModulo.left =current} "mod" right=ExpressionLevel3)
		//)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		// // Left associativity
		//ExpressionLevel3
		//( ({ExpressionMultiply.left=current} "*" right=ExpressionLevel3)
		//| ({ExpressionDivision.left=current} "/" right=ExpressionLevel3)
		//| ({ExpressionMaximum.left =current} "max" right=ExpressionLevel3)
		//| ({ExpressionMinimum.left =current} "min" right=ExpressionLevel3)
		//| ({ExpressionModulo.left =current} "mod" right=ExpressionLevel3)
		//)*
		public Group getGroup() { return cGroup; }
		
		// // Left associativity
		//ExpressionLevel3
		public RuleCall getExpressionLevel3ParserRuleCall_0() { return cExpressionLevel3ParserRuleCall_0; }
		
		//( ({ExpressionMultiply.left=current} "*" right=ExpressionLevel3)
		//| ({ExpressionDivision.left=current} "/" right=ExpressionLevel3)
		//| ({ExpressionMaximum.left =current} "max" right=ExpressionLevel3)
		//| ({ExpressionMinimum.left =current} "min" right=ExpressionLevel3)
		//| ({ExpressionModulo.left =current} "mod" right=ExpressionLevel3)
		//)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({ExpressionMultiply.left=current} "*" right=ExpressionLevel3)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ExpressionMultiply.left=current}
		public Action getExpressionMultiplyLeftAction_1_0_0() { return cExpressionMultiplyLeftAction_1_0_0; }
		
		//"*"
		public Keyword getAsteriskKeyword_1_0_1() { return cAsteriskKeyword_1_0_1; }
		
		//right=ExpressionLevel3
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//ExpressionLevel3
		public RuleCall getRightExpressionLevel3ParserRuleCall_1_0_2_0() { return cRightExpressionLevel3ParserRuleCall_1_0_2_0; }
		
		//({ExpressionDivision.left=current} "/" right=ExpressionLevel3)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{ExpressionDivision.left=current}
		public Action getExpressionDivisionLeftAction_1_1_0() { return cExpressionDivisionLeftAction_1_1_0; }
		
		//"/"
		public Keyword getSolidusKeyword_1_1_1() { return cSolidusKeyword_1_1_1; }
		
		//right=ExpressionLevel3
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//ExpressionLevel3
		public RuleCall getRightExpressionLevel3ParserRuleCall_1_1_2_0() { return cRightExpressionLevel3ParserRuleCall_1_1_2_0; }
		
		//({ExpressionMaximum.left =current} "max" right=ExpressionLevel3)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{ExpressionMaximum.left =current}
		public Action getExpressionMaximumLeftAction_1_2_0() { return cExpressionMaximumLeftAction_1_2_0; }
		
		//"max"
		public Keyword getMaxKeyword_1_2_1() { return cMaxKeyword_1_2_1; }
		
		//right=ExpressionLevel3
		public Assignment getRightAssignment_1_2_2() { return cRightAssignment_1_2_2; }
		
		//ExpressionLevel3
		public RuleCall getRightExpressionLevel3ParserRuleCall_1_2_2_0() { return cRightExpressionLevel3ParserRuleCall_1_2_2_0; }
		
		//({ExpressionMinimum.left =current} "min" right=ExpressionLevel3)
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//{ExpressionMinimum.left =current}
		public Action getExpressionMinimumLeftAction_1_3_0() { return cExpressionMinimumLeftAction_1_3_0; }
		
		//"min"
		public Keyword getMinKeyword_1_3_1() { return cMinKeyword_1_3_1; }
		
		//right=ExpressionLevel3
		public Assignment getRightAssignment_1_3_2() { return cRightAssignment_1_3_2; }
		
		//ExpressionLevel3
		public RuleCall getRightExpressionLevel3ParserRuleCall_1_3_2_0() { return cRightExpressionLevel3ParserRuleCall_1_3_2_0; }
		
		//({ExpressionModulo.left =current} "mod" right=ExpressionLevel3)
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//{ExpressionModulo.left =current}
		public Action getExpressionModuloLeftAction_1_4_0() { return cExpressionModuloLeftAction_1_4_0; }
		
		//"mod"
		public Keyword getModKeyword_1_4_1() { return cModKeyword_1_4_1; }
		
		//right=ExpressionLevel3
		public Assignment getRightAssignment_1_4_2() { return cRightAssignment_1_4_2; }
		
		//ExpressionLevel3
		public RuleCall getRightExpressionLevel3ParserRuleCall_1_4_2_0() { return cRightExpressionLevel3ParserRuleCall_1_4_2_0; }
	}
	public class ExpressionLevel3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.ExpressionLevel3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionLevel4ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionPowerLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionLevel3ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExpressionLevel3 returns IntExpression: // Right associativity
		//ExpressionLevel4
		//( ({ExpressionPower.left=current} "^"
		//right=ExpressionLevel3)
		//)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		// // Right associativity
		//ExpressionLevel4
		//( ({ExpressionPower.left=current} "^"
		//right=ExpressionLevel3)
		//)?
		public Group getGroup() { return cGroup; }
		
		// // Right associativity
		//ExpressionLevel4
		public RuleCall getExpressionLevel4ParserRuleCall_0() { return cExpressionLevel4ParserRuleCall_0; }
		
		//( ({ExpressionPower.left=current} "^"
		//right=ExpressionLevel3)
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ExpressionPower.left=current}
		public Action getExpressionPowerLeftAction_1_0() { return cExpressionPowerLeftAction_1_0; }
		
		//"^"
		public Keyword getCircumflexAccentKeyword_1_1() { return cCircumflexAccentKeyword_1_1; }
		
		//right=ExpressionLevel3
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ExpressionLevel3
		public RuleCall getRightExpressionLevel3ParserRuleCall_1_2_0() { return cRightExpressionLevel3ParserRuleCall_1_2_0; }
	}
	public class ExpressionLevel4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.ExpressionLevel4");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionMinusParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionPlusParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionLevel5ParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ExpressionLevel4 returns IntExpression:
		//ExpressionMinus | ExpressionPlus | ExpressionLevel5
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionMinus | ExpressionPlus | ExpressionLevel5
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExpressionMinus
		public RuleCall getExpressionMinusParserRuleCall_0() { return cExpressionMinusParserRuleCall_0; }
		
		//ExpressionPlus
		public RuleCall getExpressionPlusParserRuleCall_1() { return cExpressionPlusParserRuleCall_1; }
		
		//ExpressionLevel5
		public RuleCall getExpressionLevel5ParserRuleCall_2() { return cExpressionLevel5ParserRuleCall_2; }
	}
	public class ExpressionMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.ExpressionMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubExpressionLevel5ParserRuleCall_1_0 = (RuleCall)cSubAssignment_1.eContents().get(0);
		
		//ExpressionMinus:
		//"-" sub=ExpressionLevel5
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"-" sub=ExpressionLevel5
		public Group getGroup() { return cGroup; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//sub=ExpressionLevel5
		public Assignment getSubAssignment_1() { return cSubAssignment_1; }
		
		//ExpressionLevel5
		public RuleCall getSubExpressionLevel5ParserRuleCall_1_0() { return cSubExpressionLevel5ParserRuleCall_1_0; }
	}
	public class ExpressionPlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.ExpressionPlus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubExpressionLevel5ParserRuleCall_1_0 = (RuleCall)cSubAssignment_1.eContents().get(0);
		
		//ExpressionPlus:
		//"+" sub=ExpressionLevel5
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"+" sub=ExpressionLevel5
		public Group getGroup() { return cGroup; }
		
		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//sub=ExpressionLevel5
		public Assignment getSubAssignment_1() { return cSubAssignment_1; }
		
		//ExpressionLevel5
		public RuleCall getSubExpressionLevel5ParserRuleCall_1_0() { return cSubExpressionLevel5ParserRuleCall_1_0; }
	}
	public class ExpressionLevel5Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.ExpressionLevel5");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionBracketParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionConstantIntParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionBalanceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ExpressionLevel5 returns IntExpression:
		//ExpressionBracket |
		//ExpressionConstantInt |
		//ExpressionBalance
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionBracket |
		//ExpressionConstantInt |
		//ExpressionBalance
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExpressionBracket
		public RuleCall getExpressionBracketParserRuleCall_0() { return cExpressionBracketParserRuleCall_0; }
		
		//ExpressionConstantInt
		public RuleCall getExpressionConstantIntParserRuleCall_1() { return cExpressionConstantIntParserRuleCall_1; }
		
		//ExpressionBalance
		public RuleCall getExpressionBalanceParserRuleCall_2() { return cExpressionBalanceParserRuleCall_2; }
	}
	public class ExpressionBracketElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.ExpressionBracket");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubIntExpressionParserRuleCall_1_0 = (RuleCall)cSubAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExpressionBracket:
		//"(" sub=IntExpression ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" sub=IntExpression ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//sub=IntExpression
		public Assignment getSubAssignment_1() { return cSubAssignment_1; }
		
		//IntExpression
		public RuleCall getSubIntExpressionParserRuleCall_1_0() { return cSubIntExpressionParserRuleCall_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ExpressionConstantIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.ExpressionConstantInt");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ExpressionConstantInt:
		//value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class ExpressionBalanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.ExpressionBalance");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBalanceEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ExpressionBalance:
		//value=Balance
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=Balance
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//Balance
		public RuleCall getValueBalanceEnumRuleCall_0() { return cValueBalanceEnumRuleCall_0; }
	}
	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.BooleanExpression");
		private final RuleCall cBooleanExpressionLevel1ParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BooleanExpression: BooleanExpressionLevel1
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanExpressionLevel1
		public RuleCall getBooleanExpressionLevel1ParserRuleCall() { return cBooleanExpressionLevel1ParserRuleCall; }
	}
	public class BooleanExpressionLevel1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.BooleanExpressionLevel1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBooleanExpressionLevel2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionBinOpLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cBopAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBopBinaryBooleanOperatorEnumRuleCall_1_1_0 = (RuleCall)cBopAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBooleanExpressionLevel2ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BooleanExpressionLevel1 returns BooleanExpression: // Left associativity
		//BooleanExpressionLevel2
		//( {ExpressionBinOp.left=current} bop = BinaryBooleanOperator
		//right=BooleanExpressionLevel2
		//)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		// // Left associativity
		//BooleanExpressionLevel2
		//( {ExpressionBinOp.left=current} bop = BinaryBooleanOperator
		//right=BooleanExpressionLevel2
		//)*
		public Group getGroup() { return cGroup; }
		
		// // Left associativity
		//BooleanExpressionLevel2
		public RuleCall getBooleanExpressionLevel2ParserRuleCall_0() { return cBooleanExpressionLevel2ParserRuleCall_0; }
		
		//( {ExpressionBinOp.left=current} bop = BinaryBooleanOperator
		//right=BooleanExpressionLevel2
		//)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ExpressionBinOp.left=current}
		public Action getExpressionBinOpLeftAction_1_0() { return cExpressionBinOpLeftAction_1_0; }
		
		//bop = BinaryBooleanOperator
		public Assignment getBopAssignment_1_1() { return cBopAssignment_1_1; }
		
		//BinaryBooleanOperator
		public RuleCall getBopBinaryBooleanOperatorEnumRuleCall_1_1_0() { return cBopBinaryBooleanOperatorEnumRuleCall_1_1_0; }
		
		//right=BooleanExpressionLevel2
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BooleanExpressionLevel2
		public RuleCall getRightBooleanExpressionLevel2ParserRuleCall_1_2_0() { return cRightBooleanExpressionLevel2ParserRuleCall_1_2_0; }
	}
	public class BooleanExpressionLevel2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.BooleanExpressionLevel2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNotExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanExpressionLevel3ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BooleanExpressionLevel2 returns BooleanExpression:
		//NotExpression |
		//BooleanExpressionLevel3
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NotExpression |
		//BooleanExpressionLevel3
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NotExpression
		public RuleCall getNotExpressionParserRuleCall_0() { return cNotExpressionParserRuleCall_0; }
		
		//BooleanExpressionLevel3
		public RuleCall getBooleanExpressionLevel3ParserRuleCall_1() { return cBooleanExpressionLevel3ParserRuleCall_1; }
	}
	public class NotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.NotExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNOTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubBooleanExpressionLevel3ParserRuleCall_1_0 = (RuleCall)cSubAssignment_1.eContents().get(0);
		
		//NotExpression:
		//"NOT" sub = BooleanExpressionLevel3
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"NOT" sub = BooleanExpressionLevel3
		public Group getGroup() { return cGroup; }
		
		//"NOT"
		public Keyword getNOTKeyword_0() { return cNOTKeyword_0; }
		
		//sub = BooleanExpressionLevel3
		public Assignment getSubAssignment_1() { return cSubAssignment_1; }
		
		//BooleanExpressionLevel3
		public RuleCall getSubBooleanExpressionLevel3ParserRuleCall_1_0() { return cSubBooleanExpressionLevel3ParserRuleCall_1_0; }
	}
	public class BooleanExpressionLevel3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.BooleanExpressionLevel3");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComparisonExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanExpressionBracketParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanExpressionConstantParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BooleanExpressionLevel3 returns BooleanExpression:
		//(=> ComparisonExpression) |
		//BooleanExpressionBracket |
		//BooleanExpressionConstant
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(=> ComparisonExpression) |
		//BooleanExpressionBracket |
		//BooleanExpressionConstant
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(=> ComparisonExpression)
		public RuleCall getComparisonExpressionParserRuleCall_0() { return cComparisonExpressionParserRuleCall_0; }
		
		//BooleanExpressionBracket
		public RuleCall getBooleanExpressionBracketParserRuleCall_1() { return cBooleanExpressionBracketParserRuleCall_1; }
		
		//BooleanExpressionConstant
		public RuleCall getBooleanExpressionConstantParserRuleCall_2() { return cBooleanExpressionConstantParserRuleCall_2; }
	}
	public class ComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.ComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionCompOpAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftIntExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpCompareOperatorEnumRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightIntExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		
		//ComparisonExpression returns BooleanExpression: {ExpressionCompOp}
		//left=IntExpression op = CompareOperator right = IntExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		// {ExpressionCompOp}
		//left=IntExpression op = CompareOperator right = IntExpression
		public Group getGroup() { return cGroup; }
		
		//{ExpressionCompOp}
		public Action getExpressionCompOpAction_0() { return cExpressionCompOpAction_0; }
		
		//left=IntExpression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//IntExpression
		public RuleCall getLeftIntExpressionParserRuleCall_1_0() { return cLeftIntExpressionParserRuleCall_1_0; }
		
		//op = CompareOperator
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }
		
		//CompareOperator
		public RuleCall getOpCompareOperatorEnumRuleCall_2_0() { return cOpCompareOperatorEnumRuleCall_2_0; }
		
		//right = IntExpression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//IntExpression
		public RuleCall getRightIntExpressionParserRuleCall_3_0() { return cRightIntExpressionParserRuleCall_3_0; }
	}
	public class BooleanExpressionBracketElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.BooleanExpressionBracket");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubBooleanExpressionParserRuleCall_1_0 = (RuleCall)cSubAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BooleanExpressionBracket:
		//"(" sub=BooleanExpression ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" sub=BooleanExpression ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//sub=BooleanExpression
		public Assignment getSubAssignment_1() { return cSubAssignment_1; }
		
		//BooleanExpression
		public RuleCall getSubBooleanExpressionParserRuleCall_1_0() { return cSubBooleanExpressionParserRuleCall_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class BooleanExpressionConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.BooleanExpressionConstant");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBOOL_LITERALTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanExpressionConstant:
		//value=BOOL_LITERAL
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=BOOL_LITERAL
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//BOOL_LITERAL
		public RuleCall getValueBOOL_LITERALTerminalRuleCall_0() { return cValueBOOL_LITERALTerminalRuleCall_0; }
	}
	
	public class TimeUnitElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.TimeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMINUTEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMINUTEMinKeyword_0_0 = (Keyword)cMINUTEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHOUREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHOURHourKeyword_1_0 = (Keyword)cHOUREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDAYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDAYDayKeyword_2_0 = (Keyword)cDAYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cWEEKEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cWEEKWeekKeyword_3_0 = (Keyword)cWEEKEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum TimeUnit:
		//MINUTE = 'min' |
		//HOUR = 'hour' |
		//DAY = 'day' |
		//WEEK = 'week'
		//;
		public EnumRule getRule() { return rule; }
		
		//MINUTE = 'min' |
		//HOUR = 'hour' |
		//DAY = 'day' |
		//WEEK = 'week'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MINUTE = 'min'
		public EnumLiteralDeclaration getMINUTEEnumLiteralDeclaration_0() { return cMINUTEEnumLiteralDeclaration_0; }
		
		//'min'
		public Keyword getMINUTEMinKeyword_0_0() { return cMINUTEMinKeyword_0_0; }
		
		//HOUR = 'hour'
		public EnumLiteralDeclaration getHOUREnumLiteralDeclaration_1() { return cHOUREnumLiteralDeclaration_1; }
		
		//'hour'
		public Keyword getHOURHourKeyword_1_0() { return cHOURHourKeyword_1_0; }
		
		//DAY = 'day'
		public EnumLiteralDeclaration getDAYEnumLiteralDeclaration_2() { return cDAYEnumLiteralDeclaration_2; }
		
		//'day'
		public Keyword getDAYDayKeyword_2_0() { return cDAYDayKeyword_2_0; }
		
		//WEEK = 'week'
		public EnumLiteralDeclaration getWEEKEnumLiteralDeclaration_3() { return cWEEKEnumLiteralDeclaration_3; }
		
		//'week'
		public Keyword getWEEKWeekKeyword_3_0() { return cWEEKWeekKeyword_3_0; }
	}
	public class BalanceElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.Balance");
		private final EnumLiteralDeclaration cBALANCEEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cBALANCEBalanceKeyword_0 = (Keyword)cBALANCEEnumLiteralDeclaration.eContents().get(0);
		
		//enum Balance:
		//BALANCE = 'balance'
		//;
		public EnumRule getRule() { return rule; }
		
		//BALANCE = 'balance'
		public EnumLiteralDeclaration getBALANCEEnumLiteralDeclaration() { return cBALANCEEnumLiteralDeclaration; }
		
		//'balance'
		public Keyword getBALANCEBalanceKeyword_0() { return cBALANCEBalanceKeyword_0; }
	}
	public class BinaryBooleanOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.BinaryBooleanOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDANDKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cORORKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BinaryBooleanOperator:
		//AND = 'AND' |
		//OR = 'OR'
		//;
		public EnumRule getRule() { return rule; }
		
		//AND = 'AND' |
		//OR = 'OR'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AND = 'AND'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }
		
		//'AND'
		public Keyword getANDANDKeyword_0_0() { return cANDANDKeyword_0_0; }
		
		//OR = 'OR'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }
		
		//'OR'
		public Keyword getORORKeyword_1_0() { return cORORKeyword_1_0; }
	}
	public class CompareOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.CompareOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEQEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNEQEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNEQExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNEQEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGEQEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGEQGreaterThanSignEqualsSignKeyword_2_0 = (Keyword)cGEQEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGGreaterThanSignKeyword_3_0 = (Keyword)cGEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLEQEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLEQLessThanSignEqualsSignKeyword_4_0 = (Keyword)cLEQEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLLessThanSignKeyword_5_0 = (Keyword)cLEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum CompareOperator:
		//EQ = '==' |
		//NEQ = '!=' |
		//GEQ = '>=' |
		//G = '>' |
		//LEQ = '<=' |
		//L = '<'
		//;
		public EnumRule getRule() { return rule; }
		
		//EQ = '==' |
		//NEQ = '!=' |
		//GEQ = '>=' |
		//G = '>' |
		//LEQ = '<=' |
		//L = '<'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQ = '=='
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_0() { return cEQEnumLiteralDeclaration_0; }
		
		//'=='
		public Keyword getEQEqualsSignEqualsSignKeyword_0_0() { return cEQEqualsSignEqualsSignKeyword_0_0; }
		
		//NEQ = '!='
		public EnumLiteralDeclaration getNEQEnumLiteralDeclaration_1() { return cNEQEnumLiteralDeclaration_1; }
		
		//'!='
		public Keyword getNEQExclamationMarkEqualsSignKeyword_1_0() { return cNEQExclamationMarkEqualsSignKeyword_1_0; }
		
		//GEQ = '>='
		public EnumLiteralDeclaration getGEQEnumLiteralDeclaration_2() { return cGEQEnumLiteralDeclaration_2; }
		
		//'>='
		public Keyword getGEQGreaterThanSignEqualsSignKeyword_2_0() { return cGEQGreaterThanSignEqualsSignKeyword_2_0; }
		
		//G = '>'
		public EnumLiteralDeclaration getGEnumLiteralDeclaration_3() { return cGEnumLiteralDeclaration_3; }
		
		//'>'
		public Keyword getGGreaterThanSignKeyword_3_0() { return cGGreaterThanSignKeyword_3_0; }
		
		//LEQ = '<='
		public EnumLiteralDeclaration getLEQEnumLiteralDeclaration_4() { return cLEQEnumLiteralDeclaration_4; }
		
		//'<='
		public Keyword getLEQLessThanSignEqualsSignKeyword_4_0() { return cLEQLessThanSignEqualsSignKeyword_4_0; }
		
		//L = '<'
		public EnumLiteralDeclaration getLEnumLiteralDeclaration_5() { return cLEnumLiteralDeclaration_5; }
		
		//'<'
		public Keyword getLLessThanSignKeyword_5_0() { return cLLessThanSignKeyword_5_0; }
	}
	
	private final PlanningElements pPlanning;
	private final PersonElements pPerson;
	private final TaskElements pTask;
	private final ProjectElements pProject;
	private final ProjectUseElements pProjectUse;
	private final DurationElements pDuration;
	private final ActionElements pAction;
	private final LunchActionElements pLunchAction;
	private final MeetingActionElements pMeetingAction;
	private final PaperActionElements pPaperAction;
	private final PaymentActionElements pPaymentAction;
	private final TimeUnitElements eTimeUnit;
	private final IntExpressionElements pIntExpression;
	private final ExpressionLevel1Elements pExpressionLevel1;
	private final ExpressionLevel2Elements pExpressionLevel2;
	private final ExpressionLevel3Elements pExpressionLevel3;
	private final ExpressionLevel4Elements pExpressionLevel4;
	private final ExpressionMinusElements pExpressionMinus;
	private final ExpressionPlusElements pExpressionPlus;
	private final ExpressionLevel5Elements pExpressionLevel5;
	private final ExpressionBracketElements pExpressionBracket;
	private final ExpressionConstantIntElements pExpressionConstantInt;
	private final ExpressionBalanceElements pExpressionBalance;
	private final BalanceElements eBalance;
	private final BooleanExpressionElements pBooleanExpression;
	private final BooleanExpressionLevel1Elements pBooleanExpressionLevel1;
	private final BinaryBooleanOperatorElements eBinaryBooleanOperator;
	private final BooleanExpressionLevel2Elements pBooleanExpressionLevel2;
	private final NotExpressionElements pNotExpression;
	private final BooleanExpressionLevel3Elements pBooleanExpressionLevel3;
	private final ComparisonExpressionElements pComparisonExpression;
	private final CompareOperatorElements eCompareOperator;
	private final BooleanExpressionBracketElements pBooleanExpressionBracket;
	private final BooleanExpressionConstantElements pBooleanExpressionConstant;
	private final TerminalRule tBOOL_LITERAL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TaskDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPlanning = new PlanningElements();
		this.pPerson = new PersonElements();
		this.pTask = new TaskElements();
		this.pProject = new ProjectElements();
		this.pProjectUse = new ProjectUseElements();
		this.pDuration = new DurationElements();
		this.pAction = new ActionElements();
		this.pLunchAction = new LunchActionElements();
		this.pMeetingAction = new MeetingActionElements();
		this.pPaperAction = new PaperActionElements();
		this.pPaymentAction = new PaymentActionElements();
		this.eTimeUnit = new TimeUnitElements();
		this.pIntExpression = new IntExpressionElements();
		this.pExpressionLevel1 = new ExpressionLevel1Elements();
		this.pExpressionLevel2 = new ExpressionLevel2Elements();
		this.pExpressionLevel3 = new ExpressionLevel3Elements();
		this.pExpressionLevel4 = new ExpressionLevel4Elements();
		this.pExpressionMinus = new ExpressionMinusElements();
		this.pExpressionPlus = new ExpressionPlusElements();
		this.pExpressionLevel5 = new ExpressionLevel5Elements();
		this.pExpressionBracket = new ExpressionBracketElements();
		this.pExpressionConstantInt = new ExpressionConstantIntElements();
		this.pExpressionBalance = new ExpressionBalanceElements();
		this.eBalance = new BalanceElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pBooleanExpressionLevel1 = new BooleanExpressionLevel1Elements();
		this.eBinaryBooleanOperator = new BinaryBooleanOperatorElements();
		this.pBooleanExpressionLevel2 = new BooleanExpressionLevel2Elements();
		this.pNotExpression = new NotExpressionElements();
		this.pBooleanExpressionLevel3 = new BooleanExpressionLevel3Elements();
		this.pComparisonExpression = new ComparisonExpressionElements();
		this.eCompareOperator = new CompareOperatorElements();
		this.pBooleanExpressionBracket = new BooleanExpressionBracketElements();
		this.pBooleanExpressionConstant = new BooleanExpressionConstantElements();
		this.tBOOL_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "persons.tasks.TaskDSL.BOOL_LITERAL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("persons.tasks.TaskDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Planning: 'Planning' name = ID
	//(anonymous ?= 'anonymous')?
	//(persons += Person | tasks += Task)*
	//;
	public PlanningElements getPlanningAccess() {
		return pPlanning;
	}
	
	public ParserRule getPlanningRule() {
		return getPlanningAccess().getRule();
	}
	
	//Person: 'Person:' name=ID
	//;
	public PersonElements getPersonAccess() {
		return pPerson;
	}
	
	public ParserRule getPersonRule() {
		return getPersonAccess().getRule();
	}
	
	//Task: 'Task:' name = ID action = Action // added name
	//'persons:' persons += [Person] +
	//'priority:' prio = INT
	//('duration:' duration = Duration)?
	//'defineProjects:' (projects += Project)*
	//'useProjects:' (use += ProjectUse)*
	//("extends" extends=[Task|ID])?
	//;
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//Project: name = ID
	//;
	public ProjectElements getProjectAccess() {
		return pProject;
	}
	
	public ParserRule getProjectRule() {
		return getProjectAccess().getRule();
	}
	
	//ProjectUse: project = [Project]
	//;
	public ProjectUseElements getProjectUseAccess() {
		return pProjectUse;
	}
	
	public ParserRule getProjectUseRule() {
		return getProjectUseAccess().getRule();
	}
	
	//Duration:
	//dl = INT unit = TimeUnit
	//;
	public DurationElements getDurationAccess() {
		return pDuration;
	}
	
	public ParserRule getDurationRule() {
		return getDurationAccess().getRule();
	}
	
	//Action: LunchAction | MeetingAction | PaperAction | PaymentAction
	//;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//LunchAction: 'Lunch' location = ID
	//;
	public LunchActionElements getLunchActionAccess() {
		return pLunchAction;
	}
	
	public ParserRule getLunchActionRule() {
		return getLunchActionAccess().getRule();
	}
	
	//MeetingAction: 'Meeting' topic = STRING
	//;
	public MeetingActionElements getMeetingActionAccess() {
		return pMeetingAction;
	}
	
	public ParserRule getMeetingActionRule() {
		return getMeetingActionAccess().getRule();
	}
	
	//PaperAction: 'Report' report = ID
	//;
	public PaperActionElements getPaperActionAccess() {
		return pPaperAction;
	}
	
	public ParserRule getPaperActionRule() {
		return getPaperActionAccess().getRule();
	}
	
	//PaymentAction: ('If' condition = BooleanExpression)?
	//'Pay' amount = IntExpression 'euro'
	//;
	public PaymentActionElements getPaymentActionAccess() {
		return pPaymentAction;
	}
	
	public ParserRule getPaymentActionRule() {
		return getPaymentActionAccess().getRule();
	}
	
	//enum TimeUnit:
	//MINUTE = 'min' |
	//HOUR = 'hour' |
	//DAY = 'day' |
	//WEEK = 'week'
	//;
	public TimeUnitElements getTimeUnitAccess() {
		return eTimeUnit;
	}
	
	public EnumRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}
	
	//IntExpression: ExpressionLevel1
	//;
	public IntExpressionElements getIntExpressionAccess() {
		return pIntExpression;
	}
	
	public ParserRule getIntExpressionRule() {
		return getIntExpressionAccess().getRule();
	}
	
	//ExpressionLevel1 returns IntExpression: // Left associativity
	//ExpressionLevel2
	//( ({ExpressionAddition.left =current} "+" right=ExpressionLevel2)
	//| ({ExpressionSubtraction.left=current} "-" right=ExpressionLevel2)
	//)*
	//;
	public ExpressionLevel1Elements getExpressionLevel1Access() {
		return pExpressionLevel1;
	}
	
	public ParserRule getExpressionLevel1Rule() {
		return getExpressionLevel1Access().getRule();
	}
	
	//ExpressionLevel2 returns IntExpression: // Left associativity
	//ExpressionLevel3
	//( ({ExpressionMultiply.left=current} "*" right=ExpressionLevel3)
	//| ({ExpressionDivision.left=current} "/" right=ExpressionLevel3)
	//| ({ExpressionMaximum.left =current} "max" right=ExpressionLevel3)
	//| ({ExpressionMinimum.left =current} "min" right=ExpressionLevel3)
	//| ({ExpressionModulo.left =current} "mod" right=ExpressionLevel3)
	//)*
	//;
	public ExpressionLevel2Elements getExpressionLevel2Access() {
		return pExpressionLevel2;
	}
	
	public ParserRule getExpressionLevel2Rule() {
		return getExpressionLevel2Access().getRule();
	}
	
	//ExpressionLevel3 returns IntExpression: // Right associativity
	//ExpressionLevel4
	//( ({ExpressionPower.left=current} "^"
	//right=ExpressionLevel3)
	//)?
	//;
	public ExpressionLevel3Elements getExpressionLevel3Access() {
		return pExpressionLevel3;
	}
	
	public ParserRule getExpressionLevel3Rule() {
		return getExpressionLevel3Access().getRule();
	}
	
	//ExpressionLevel4 returns IntExpression:
	//ExpressionMinus | ExpressionPlus | ExpressionLevel5
	//;
	public ExpressionLevel4Elements getExpressionLevel4Access() {
		return pExpressionLevel4;
	}
	
	public ParserRule getExpressionLevel4Rule() {
		return getExpressionLevel4Access().getRule();
	}
	
	//ExpressionMinus:
	//"-" sub=ExpressionLevel5
	//;
	public ExpressionMinusElements getExpressionMinusAccess() {
		return pExpressionMinus;
	}
	
	public ParserRule getExpressionMinusRule() {
		return getExpressionMinusAccess().getRule();
	}
	
	//ExpressionPlus:
	//"+" sub=ExpressionLevel5
	//;
	public ExpressionPlusElements getExpressionPlusAccess() {
		return pExpressionPlus;
	}
	
	public ParserRule getExpressionPlusRule() {
		return getExpressionPlusAccess().getRule();
	}
	
	//ExpressionLevel5 returns IntExpression:
	//ExpressionBracket |
	//ExpressionConstantInt |
	//ExpressionBalance
	//;
	public ExpressionLevel5Elements getExpressionLevel5Access() {
		return pExpressionLevel5;
	}
	
	public ParserRule getExpressionLevel5Rule() {
		return getExpressionLevel5Access().getRule();
	}
	
	//ExpressionBracket:
	//"(" sub=IntExpression ")"
	//;
	public ExpressionBracketElements getExpressionBracketAccess() {
		return pExpressionBracket;
	}
	
	public ParserRule getExpressionBracketRule() {
		return getExpressionBracketAccess().getRule();
	}
	
	//ExpressionConstantInt:
	//value=INT
	//;
	public ExpressionConstantIntElements getExpressionConstantIntAccess() {
		return pExpressionConstantInt;
	}
	
	public ParserRule getExpressionConstantIntRule() {
		return getExpressionConstantIntAccess().getRule();
	}
	
	//ExpressionBalance:
	//value=Balance
	//;
	public ExpressionBalanceElements getExpressionBalanceAccess() {
		return pExpressionBalance;
	}
	
	public ParserRule getExpressionBalanceRule() {
		return getExpressionBalanceAccess().getRule();
	}
	
	//enum Balance:
	//BALANCE = 'balance'
	//;
	public BalanceElements getBalanceAccess() {
		return eBalance;
	}
	
	public EnumRule getBalanceRule() {
		return getBalanceAccess().getRule();
	}
	
	//BooleanExpression: BooleanExpressionLevel1
	//;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	//BooleanExpressionLevel1 returns BooleanExpression: // Left associativity
	//BooleanExpressionLevel2
	//( {ExpressionBinOp.left=current} bop = BinaryBooleanOperator
	//right=BooleanExpressionLevel2
	//)*
	//;
	public BooleanExpressionLevel1Elements getBooleanExpressionLevel1Access() {
		return pBooleanExpressionLevel1;
	}
	
	public ParserRule getBooleanExpressionLevel1Rule() {
		return getBooleanExpressionLevel1Access().getRule();
	}
	
	//enum BinaryBooleanOperator:
	//AND = 'AND' |
	//OR = 'OR'
	//;
	public BinaryBooleanOperatorElements getBinaryBooleanOperatorAccess() {
		return eBinaryBooleanOperator;
	}
	
	public EnumRule getBinaryBooleanOperatorRule() {
		return getBinaryBooleanOperatorAccess().getRule();
	}
	
	//BooleanExpressionLevel2 returns BooleanExpression:
	//NotExpression |
	//BooleanExpressionLevel3
	//;
	public BooleanExpressionLevel2Elements getBooleanExpressionLevel2Access() {
		return pBooleanExpressionLevel2;
	}
	
	public ParserRule getBooleanExpressionLevel2Rule() {
		return getBooleanExpressionLevel2Access().getRule();
	}
	
	//NotExpression:
	//"NOT" sub = BooleanExpressionLevel3
	//;
	public NotExpressionElements getNotExpressionAccess() {
		return pNotExpression;
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}
	
	//BooleanExpressionLevel3 returns BooleanExpression:
	//(=> ComparisonExpression) |
	//BooleanExpressionBracket |
	//BooleanExpressionConstant
	//;
	public BooleanExpressionLevel3Elements getBooleanExpressionLevel3Access() {
		return pBooleanExpressionLevel3;
	}
	
	public ParserRule getBooleanExpressionLevel3Rule() {
		return getBooleanExpressionLevel3Access().getRule();
	}
	
	//ComparisonExpression returns BooleanExpression: {ExpressionCompOp}
	//left=IntExpression op = CompareOperator right = IntExpression
	//;
	public ComparisonExpressionElements getComparisonExpressionAccess() {
		return pComparisonExpression;
	}
	
	public ParserRule getComparisonExpressionRule() {
		return getComparisonExpressionAccess().getRule();
	}
	
	//enum CompareOperator:
	//EQ = '==' |
	//NEQ = '!=' |
	//GEQ = '>=' |
	//G = '>' |
	//LEQ = '<=' |
	//L = '<'
	//;
	public CompareOperatorElements getCompareOperatorAccess() {
		return eCompareOperator;
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}
	
	//BooleanExpressionBracket:
	//"(" sub=BooleanExpression ")"
	//;
	public BooleanExpressionBracketElements getBooleanExpressionBracketAccess() {
		return pBooleanExpressionBracket;
	}
	
	public ParserRule getBooleanExpressionBracketRule() {
		return getBooleanExpressionBracketAccess().getRule();
	}
	
	//BooleanExpressionConstant:
	//value=BOOL_LITERAL
	//;
	public BooleanExpressionConstantElements getBooleanExpressionConstantAccess() {
		return pBooleanExpressionConstant;
	}
	
	public ParserRule getBooleanExpressionConstantRule() {
		return getBooleanExpressionConstantAccess().getRule();
	}
	
	//terminal BOOL_LITERAL returns ecore::EBoolean: 'true' | 'false' | 'TRUE' | 'FALSE'
	//;
	public TerminalRule getBOOL_LITERALRule() {
		return tBOOL_LITERAL;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
