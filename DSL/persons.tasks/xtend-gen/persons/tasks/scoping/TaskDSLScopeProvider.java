/**
 * generated by Xtext 2.32.0
 */
package persons.tasks.scoping;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import persons.tasks.taskDSL.Planning;
import persons.tasks.taskDSL.ProjectUse;
import persons.tasks.taskDSL.Task;
import persons.tasks.taskDSL.TaskDSLPackage;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class TaskDSLScopeProvider extends AbstractTaskDSLScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    if (((context instanceof ProjectUse) && 
      Objects.equal(reference, TaskDSLPackage.Literals.PROJECT_USE__PROJECT))) {
      return this.getScopeProjectUseProject(((ProjectUse) context));
    }
    return super.getScope(context, reference);
  }

  private IScope getScopeProjectUseProject(final ProjectUse projectUse) {
    EObject context = projectUse;
    while ((!((context == null) || (context instanceof Planning)))) {
      context = context.eContainer();
    }
    Planning runningPlanning = ((Planning) context);
    IScope scope = IScope.NULLSCOPE;
    EList<Task> _tasks = runningPlanning.getTasks();
    for (final Task t : _tasks) {
      scope = Scopes.scopeFor(t.getProjects(), scope);
    }
    return scope;
  }
}
